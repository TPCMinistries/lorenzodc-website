// app/api/diagnostic/pdf/route.ts
import { NextResponse } from "next/server";
import PDFDocument from "pdfkit";

export const runtime = "nodejs";        // pdfkit needs Node runtime
export const dynamic = "force-dynamic";

export async function POST(req: Request) {
  const { score, tier, roadmap, answers } = await req.json();

  const doc = new PDFDocument({ margin: 50 });

  // Collect chunks as Uint8Array
  const chunks: Uint8Array[] = [];
  doc.on("data", (c: Uint8Array) => chunks.push(c));

  const done = new Promise<void>((resolve) => doc.on("end", resolve));

  // ── PDF content ─────────────────────────────────────────
  doc.fontSize(18).fillColor("#000").text("AI Readiness Scorecard — The Catalyst Path");
  doc.moveDown(0.5);
  doc.fontSize(12).fillColor("#666").text("Generated by Lorenzo — Futurist AI Strategy");
  doc.moveDown();

  doc.fillColor("#000").fontSize(14).text(`Score: ${score} / 50`);
  doc.text(`Tier: ${tier}`);
  doc.moveDown();

  doc.fontSize(13).text("Prioritized Roadmap:");
  doc.moveDown(0.5);
  (roadmap as string[]).forEach((item) => doc.text(`• ${item}`));
  doc.moveDown();

  if (answers) {
    doc.fontSize(13).text("Your Inputs:");
    Object.entries(answers).forEach(([k, v]) => doc.text(`${k}: ${v}/5`));
    doc.moveDown();
  }

  doc.fontSize(11).fillColor("#666").text(
    "Next step: Book a $1,500 Executive Briefing to review this scorecard, estimate ROI, and lock a 90-day pilot."
  );

  doc.end();
  await done;

  // Merge Uint8Array chunks into one ArrayBuffer
  const total = chunks.reduce((s, c) => s + c.byteLength, 0);
  const merged = new Uint8Array(total);
  let offset = 0;
  for (const c of chunks) {
    merged.set(c, offset);
    offset += c.byteLength;
  }
  const arrayBuffer = merged.buffer; // BodyInit-safe

  return new NextResponse(arrayBuffer as ArrayBuffer, {
    headers: {
      "Content-Type": "application/pdf",
      "Content-Disposition": 'attachment; filename="ai_readiness_scorecard.pdf"',
      "Cache-Control": "no-store",
    },
  });
}
